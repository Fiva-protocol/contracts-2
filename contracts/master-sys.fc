;; storage scheme
;; storage#_ admin_address:MsgAddress user_order_code:^Cell = Storage;

#include "imports/stdlib.fc";
;; #include "imports/order_utils.fc";
#include "imports/op-codes-fiva.fc";
#pragma version >=0.2.0;

(slice, int ,int,int,int,int,int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ;; ds~load_ref() ;; user_order_code
        ds~load_coins(),;; tsTON balance
        ds~load_coins(),;; YT tsTON balance
        ds~load_coins(),;; PT tsTON balance
        ds~load_coins(),;; Maturity
        ds~load_coins(),;; ? assets in TON estimation
        ds~load_uint(32);; ? Index TON/tsTON with 6 decimals
    );
}

() save_data(slice admin_address, int tston_total_balance, int yt_total_balance, int pt_total_balance,
int maturity, int pool_value_in_ton, int index_tston_ton)
impure inline {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_coins(tston_total_balance)
        .store_coins(yt_total_balance)
        .store_coins(pt_total_balance)
        .store_coins(maturity)
        .store_coins(pool_value_in_ton)
        .store_uint(index_tston_ton,32)
        .end_cell()
    );
}

;; (slice) mint_order_contract(slice owner_address, cell user_order_code, int amount) impure {
;;     cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_order_code);
;;     slice to_contract_address = calculate_user_order_address(state_init);
;;     var msg = begin_cell()
;;         .store_uint(0x18, 6)
;;         .store_slice(to_contract_address)
;;         .store_coins(amount)
;;         .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
;;         .store_ref(state_init)
;;         .store_ref(begin_cell().end_cell())
;;         .end_cell();
;;     send_raw_message(msg, 64); ;; revert on errors
;;     return to_contract_address;
;; }

;; () create_ton_order_with_mint(slice owner_address, cell user_order_code, int query_id, int from_amount, slice to_address, int to_amount, slice to_master_address) impure {
;;     cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_order_code);
;;     slice to_contract_address = calculate_user_order_address(state_init);

;;     cell msg = begin_cell()
;;         .store_uint(0x18, 6)
;;         .store_slice(to_contract_address)
;;         .store_coins(10000000)
;;         .store_uint(7, 108)
;;         .store_ref(state_init)
;;         .store_ref(begin_cell()
;;             .store_uint("create_ton_order"c, 32)
;;             .store_uint(query_id, 64)
;;             .store_coins(from_amount)
;;             .store_slice(to_address)
;;             .store_coins(to_amount)
;;             .store_slice(to_master_address)
;;         .end_cell())
;;     .end_cell();
;;     send_raw_message(msg, 64);
;; }

;; () send_tokens(slice wallet_address, slice to_address, int jetton_amount, int ton_amount, int query_id, cell fwd_msg) impure {
;;     var msg_body = begin_cell()
;;         .store_uint(op::transfer(), 32)
;;         .store_uint(query_id, 64)
;;         .store_coins(jetton_amount)
;;         .store_slice(to_address)
;;         .store_slice(to_address)
;;         .store_uint(0, 1)
;;         .store_coins(10000000)
;;         .store_uint(1, 1)
;;         .store_ref(fwd_msg)
;;         .end_cell();
;;     var msg = begin_cell()
;;         .store_uint(0x18, 6)
;;         .store_slice(wallet_address)
;;         .store_coins(ton_amount)
;;         .store_uint(1, 107)
;;         .store_ref(msg_body)
;;         .end_cell();
;;     ;; TODO: Calculate forward fees carefully
;;     send_raw_message(msg, 64); ;; revert on errors
;; }

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); 
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice admin_address, int tston_total_balance, int yt_total_balance, int pt_total_balance,
    int maturity, int pool_value_in_ton, int index_tston_ton) = load_data();

    if (op == 10) { ;;change index
        ;; check that sender is admin
        ;; throw_unless(401, equal_slices(sender_address, admin_address));
        ;; get updated index
        int updated_index = in_msg_body~load_uint(32);
        ;; save updated info 
        save_data(admin_address, tston_total_balance, yt_total_balance, pt_total_balance,
     maturity, pool_value_in_ton, updated_index);
        return ();
    }

    if (op == 12) { ;; mint YT and PT
        ;; message should have at least from_amount TONs + fwd fee
        ;; throw_unless(410, msg_value > from_amount + 10000000);
        slice yt_address = in_msg_body~load_msg_addr();
        slice pt_address = in_msg_body~load_msg_addr();
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        int jetton_amount = in_msg_body~load_coins();
        var msg_body_yt = begin_cell() ;;mint YT
            .store_uint(21, 32)
            .store_uint(query_id, 64)
            .store_slice(to_address)
            .store_coins(10000000)
            .store_ref(begin_cell()
                .store_uint(0x178d4519, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(my_address())
                .store_slice(my_address())
                .store_coins(0)
                .store_uint(0,1)
                .store_uint(index_tston_ton,32)
            .end_cell())
        .end_cell();
        var msg_yt = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(yt_address) 
            .store_coins(10000000) ;; is it correct?
            .store_uint(1, 107)
            .store_ref(msg_body_yt)
            .end_cell();
        send_raw_message(msg_yt, 64); ;; revert on errors

        var msg_body_pt = begin_cell() ;;mint PT
            .store_uint(21, 32)
            .store_uint(query_id, 64)
            .store_slice(to_address)
            .store_coins(10000000)
            .store_ref(begin_cell()
                .store_uint(0x178d4519, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount)
                .store_slice(my_address())
                .store_slice(my_address())
                .store_coins(0)
                .store_uint(0,1)
                .store_uint(index_tston_ton,32)
            .end_cell())
        .end_cell();
        var msg_pt = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(pt_address) 
            .store_coins(10000000) ;; is it correct?
            .store_uint(1, 107)
            .store_ref(msg_body_pt)
            .end_cell();
        send_raw_message(msg_pt, 64);
    }

    if (op == 13) { ;; Claim rewards
        ;; message should have at least from_amount TONs + fwd fee
        ;; throw_unless(410, msg_value > from_amount + 10000000);
        slice yt_address = in_msg_body~load_msg_addr();
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        ;; needed infromation for claiming rewards
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        slice master_address = master_msg_cs~load_msg_addr();
        slice fiva_tston_address = master_msg_cs~load_msg_addr();
        slice user_tston_address = master_msg_cs~load_msg_addr();
        var msg_body = begin_cell()
            .store_uint(16, 32) ;; change for opcode from master yt that will forward the message to the user yt wallet
            .store_uint(query_id, 64)
            .store_slice(to_address)
            .store_coins(10000000)
            .store_ref(begin_cell()
                .store_uint(14, 32) ;; opcode in yt jetton wallet for claiming interest
                .store_uint(query_id, 64)
                .store_uint(index_tston_ton,32) ;; should user sent new index or use latest availabe when making a call? 
                .store_slice(master_address)
                .store_slice(fiva_tston_address)
                .store_slice(user_tston_address)
                .store_coins(amount)
                .end_cell())
            .end_cell();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(yt_address) 
            .store_coins(10000000) ;; is it correct?
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(msg_body)
            .end_cell();
        send_raw_message(msg, 64); ;; revert on errors
    }


    if (op == 15){ ;;withdraw rewards
        slice master_tston_address = in_msg_body~load_msg_addr(); 
        slice user_tston_address = in_msg_body~load_msg_addr(); 
        int interest = in_msg_body~load_coins();
        ;; to_address - jetton user adress
        tston_total_balance -= interest;
        var msg_body = begin_cell()
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(interest)
            .store_slice(user_tston_address)
            .store_slice(user_tston_address)
            .store_uint(0, 1)
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell();
       var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(master_tston_address)
            .store_coins(50000000) ;; what is that? 
            .store_uint(1, 107)
            .store_ref(msg_body)
            .end_cell();
        send_raw_message(msg, 1); ;; revert on errors
        save_data(admin_address,tston_total_balance,yt_total_balance,pt_total_balance,maturity,pool_value_in_ton,index_tston_ton);
    }

    ;; if (op == op::transfer_notification()) {
    ;;     int jetton_amount = in_msg_body~load_coins();
    ;;     slice to_address = in_msg_body~load_msg_addr();
    ;;     cell fwd_msg = in_msg_body~load_ref();
    ;;     slice user_contract_address = mint_order_contract(to_address, user_order_code, 0);
    ;;     send_tokens(sender_address, user_contract_address, jetton_amount, 100000000, query_id, fwd_msg);
    ;;     return ();
    ;; }

    ;; throw(0xffff);
}

int get_index () method_id {
    (_,_,_,_,_,_, int index_tston_ton) = load_data();
    return index_tston_ton;
}

;; int get_status() method_id {
;;     return 0;
;; }
